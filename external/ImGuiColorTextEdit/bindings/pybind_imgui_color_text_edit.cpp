#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>
#include <pybind11/numpy.h>

#include "ImGuiColorTextEdit/TextEditor.h"
#include "TextEditorBundle/TextEditorBundle.h"

namespace py = pybind11;

typedef uint8_t Char;

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// <litgen_glue_code>  // Autogenerated code below! Do not edit!

// </litgen_glue_code> // Autogenerated code end
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


void py_init_module_imgui_color_text_edit(py::module& m)
{
    // You can add any code here
    using PaletteIndex = TextEditor::PaletteIndex;
    using Keywords = TextEditor::Keywords;
    using Identifiers = TextEditor::Identifiers;
    using TokenRegexStrings = TextEditor::LanguageDefinition::TokenRegexStrings;

    using namespace TextEditorBundle;

    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // <litgen_pydef> // Autogenerated code below! Do not edit!
    ////////////////////    <generated_from:TextEditor.h>    ////////////////////
    auto pyClassTextEditor =
        py::class_<TextEditor>
            (m, "TextEditor", "");

    { // inner classes & enums of TextEditor
        py::enum_<TextEditor::PaletteIndex>(pyClassTextEditor, "PaletteIndex", py::arithmetic(), "")
            .value("default", TextEditor::PaletteIndex::Default, "")
            .value("keyword", TextEditor::PaletteIndex::Keyword, "")
            .value("number", TextEditor::PaletteIndex::Number, "")
            .value("string", TextEditor::PaletteIndex::String, "")
            .value("char_literal", TextEditor::PaletteIndex::CharLiteral, "")
            .value("punctuation", TextEditor::PaletteIndex::Punctuation, "")
            .value("preprocessor", TextEditor::PaletteIndex::Preprocessor, "")
            .value("identifier", TextEditor::PaletteIndex::Identifier, "")
            .value("known_identifier", TextEditor::PaletteIndex::KnownIdentifier, "")
            .value("preproc_identifier", TextEditor::PaletteIndex::PreprocIdentifier, "")
            .value("comment", TextEditor::PaletteIndex::Comment, "")
            .value("multi_line_comment", TextEditor::PaletteIndex::MultiLineComment, "")
            .value("background", TextEditor::PaletteIndex::Background, "")
            .value("cursor", TextEditor::PaletteIndex::Cursor, "")
            .value("selection", TextEditor::PaletteIndex::Selection, "")
            .value("error_marker", TextEditor::PaletteIndex::ErrorMarker, "")
            .value("breakpoint", TextEditor::PaletteIndex::Breakpoint, "")
            .value("line_number", TextEditor::PaletteIndex::LineNumber, "")
            .value("current_line_fill", TextEditor::PaletteIndex::CurrentLineFill, "")
            .value("current_line_fill_inactive", TextEditor::PaletteIndex::CurrentLineFillInactive, "")
            .value("current_line_edge", TextEditor::PaletteIndex::CurrentLineEdge, "")
            .value("max", TextEditor::PaletteIndex::Max, "");
        py::enum_<TextEditor::SelectionMode>(pyClassTextEditor, "SelectionMode", py::arithmetic(), "")
            .value("normal", TextEditor::SelectionMode::Normal, "")
            .value("word", TextEditor::SelectionMode::Word, "")
            .value("line", TextEditor::SelectionMode::Line, "");
        auto pyClassTextEditor_ClassBreakpoint =
            py::class_<TextEditor::Breakpoint>
                (pyClassTextEditor, "Breakpoint", "")
            .def_readwrite("m_line", &TextEditor::Breakpoint::mLine, "")
            .def_readwrite("m_enabled", &TextEditor::Breakpoint::mEnabled, "")
            .def_readwrite("m_condition", &TextEditor::Breakpoint::mCondition, "")
            .def(py::init<>())
            ;
        auto pyClassTextEditor_ClassCoordinates =
            py::class_<TextEditor::Coordinates>
                (pyClassTextEditor, "Coordinates", " Represents a character coordinate from the user's point of view,\n i. e. consider an uniform grid (assuming fixed-width font) on the\n screen as it is rendered, and each cell has its own coordinate, starting from 0.\n Tabs are counted as [1..mTabSize] count empty spaces, depending on\n how many space is necessary to reach the next tab stop.\n For example, coordinate (1, 5) represents the character 'B' in a line \"\tABC\", when mTabSize = 4,\n because it is rendered as \"    ABC\" on the screen.")
            .def_readwrite("m_line", &TextEditor::Coordinates::mLine, "")
            .def_readwrite("m_column", &TextEditor::Coordinates::mColumn, "")
            .def(py::init<>())
            .def(py::init<int, int>(),
                py::arg("a_line"), py::arg("a_column"))
            .def_static("invalid",
                &TextEditor::Coordinates::Invalid)
            .def("__eq__",
                &TextEditor::Coordinates::operator==, py::arg("o"))
            .def("__ne__",
                &TextEditor::Coordinates::operator!=, py::arg("o"))
            .def("__lt__",
                &TextEditor::Coordinates::operator<, py::arg("o"))
            .def("__gt__",
                &TextEditor::Coordinates::operator>, py::arg("o"))
            .def("__le__",
                &TextEditor::Coordinates::operator<=, py::arg("o"))
            .def("__ge__",
                &TextEditor::Coordinates::operator>=, py::arg("o"))
            ;
        auto pyClassTextEditor_ClassIdentifier =
            py::class_<TextEditor::Identifier>
                (pyClassTextEditor, "Identifier", "")
            .def(py::init<>([](
            TextEditor::Coordinates mLocation = TextEditor::Coordinates(), std::string mDeclaration = std::string())
            {
                auto r = std::make_unique<TextEditor::Identifier>();
                r->mLocation = mLocation;
                r->mDeclaration = mDeclaration;
                return r;
            })
            , py::arg("m_location") = TextEditor::Coordinates(), py::arg("m_declaration") = std::string()
            )
            .def_readwrite("m_location", &TextEditor::Identifier::mLocation, "")
            .def_readwrite("m_declaration", &TextEditor::Identifier::mDeclaration, "")
            ;
        auto pyClassTextEditor_ClassGlyph =
            py::class_<TextEditor::Glyph>
                (pyClassTextEditor, "Glyph", "")
            .def_readwrite("m_char", &TextEditor::Glyph::mChar, "")
            .def_readwrite("m_color_index", &TextEditor::Glyph::mColorIndex, "")
            .def(py::init<Char, TextEditor::PaletteIndex>(),
                py::arg("a_char"), py::arg("a_color_index"))
            ;
        auto pyClassTextEditor_ClassLanguageDefinition =
            py::class_<TextEditor::LanguageDefinition>
                (pyClassTextEditor, "LanguageDefinition", "")
            .def_readwrite("m_name", &TextEditor::LanguageDefinition::mName, "")
            .def_readwrite("m_keywords", &TextEditor::LanguageDefinition::mKeywords, "")
            .def_readwrite("m_identifiers", &TextEditor::LanguageDefinition::mIdentifiers, "")
            .def_readwrite("m_preproc_identifiers", &TextEditor::LanguageDefinition::mPreprocIdentifiers, "")
            .def_readwrite("m_comment_start", &TextEditor::LanguageDefinition::mCommentStart, "")
            .def_readwrite("m_comment_end", &TextEditor::LanguageDefinition::mCommentEnd, "")
            .def_readwrite("m_single_line_comment", &TextEditor::LanguageDefinition::mSingleLineComment, "")
            .def_readwrite("m_auto_indentation", &TextEditor::LanguageDefinition::mAutoIndentation, "")
            .def_readwrite("m_token_regex_strings", &TextEditor::LanguageDefinition::mTokenRegexStrings, "")
            .def_readwrite("m_case_sensitive", &TextEditor::LanguageDefinition::mCaseSensitive, "")
            .def(py::init<>())
            .def_static("c_plus_plus",
                &TextEditor::LanguageDefinition::CPlusPlus)
            .def_static("hlsl",
                &TextEditor::LanguageDefinition::HLSL)
            .def_static("glsl",
                &TextEditor::LanguageDefinition::GLSL)
            .def_static("c",
                &TextEditor::LanguageDefinition::C)
            .def_static("sql",
                &TextEditor::LanguageDefinition::SQL)
            .def_static("angel_script",
                &TextEditor::LanguageDefinition::AngelScript)
            .def_static("lua",
                &TextEditor::LanguageDefinition::Lua)
            .def_static("python",
                &TextEditor::LanguageDefinition::Python)
            ;
    } // end of inner classes & enums of TextEditor

    pyClassTextEditor
        .def(py::init<>())
        .def("set_language_definition",
            &TextEditor::SetLanguageDefinition, py::arg("a_language_def"))
        .def("get_language_definition",
            &TextEditor::GetLanguageDefinition)
        .def("get_palette",
            &TextEditor::GetPalette)
        .def("set_palette",
            &TextEditor::SetPalette, py::arg("a_value"))
        .def("set_error_markers",
            &TextEditor::SetErrorMarkers, py::arg("a_markers"))
        .def("set_breakpoints",
            &TextEditor::SetBreakpoints, py::arg("a_markers"))
        .def("render",
            py::overload_cast<const char *, const ImVec2 &, bool>(&TextEditor::Render), py::arg("a_title"), py::arg("a_size") = ImVec2(), py::arg("a_border") = false)
        .def("set_text",
            &TextEditor::SetText, py::arg("a_text"))
        .def("get_text",
            [](TextEditor & self) { return self.GetText(); })
        .def("set_text_lines",
            &TextEditor::SetTextLines, py::arg("a_lines"))
        .def("get_text_lines",
            &TextEditor::GetTextLines)
        .def("get_selected_text",
            &TextEditor::GetSelectedText)
        .def("get_current_line_text",
            &TextEditor::GetCurrentLineText)
        .def("get_total_lines",
            &TextEditor::GetTotalLines)
        .def("is_overwrite",
            &TextEditor::IsOverwrite)
        .def("set_read_only",
            &TextEditor::SetReadOnly, py::arg("a_value"))
        .def("is_read_only",
            &TextEditor::IsReadOnly)
        .def("is_text_changed",
            &TextEditor::IsTextChanged)
        .def("is_cursor_position_changed",
            &TextEditor::IsCursorPositionChanged)
        .def("is_colorizer_enabled",
            &TextEditor::IsColorizerEnabled)
        .def("set_colorizer_enable",
            &TextEditor::SetColorizerEnable, py::arg("a_value"))
        .def("get_cursor_position",
            &TextEditor::GetCursorPosition)
        .def("set_cursor_position",
            &TextEditor::SetCursorPosition, py::arg("a_position"), py::arg("cursor_line_on_page") = -1)
        .def("set_handle_mouse_inputs",
            &TextEditor::SetHandleMouseInputs, py::arg("a_value"))
        .def("is_handle_mouse_inputs_enabled",
            &TextEditor::IsHandleMouseInputsEnabled)
        .def("set_handle_keyboard_inputs",
            &TextEditor::SetHandleKeyboardInputs, py::arg("a_value"))
        .def("is_handle_keyboard_inputs_enabled",
            &TextEditor::IsHandleKeyboardInputsEnabled)
        .def("set_im_gui_child_ignored",
            &TextEditor::SetImGuiChildIgnored, py::arg("a_value"))
        .def("is_im_gui_child_ignored",
            &TextEditor::IsImGuiChildIgnored)
        .def("set_show_whitespaces",
            &TextEditor::SetShowWhitespaces, py::arg("a_value"))
        .def("is_showing_whitespaces",
            &TextEditor::IsShowingWhitespaces)
        .def("set_show_short_tab_glyphs",
            &TextEditor::SetShowShortTabGlyphs, py::arg("a_value"))
        .def("is_showing_short_tab_glyphs",
            &TextEditor::IsShowingShortTabGlyphs)
        .def("set_tab_size",
            &TextEditor::SetTabSize, py::arg("a_value"))
        .def("get_tab_size",
            &TextEditor::GetTabSize)
        .def("insert_text",
            py::overload_cast<const std::string &>(&TextEditor::InsertText), py::arg("a_value"))
        .def("insert_text",
            py::overload_cast<const char *>(&TextEditor::InsertText), py::arg("a_value"))
        .def("move_up",
            &TextEditor::MoveUp, py::arg("a_amount") = 1, py::arg("a_select") = false)
        .def("move_down",
            &TextEditor::MoveDown, py::arg("a_amount") = 1, py::arg("a_select") = false)
        .def("move_left",
            &TextEditor::MoveLeft, py::arg("a_amount") = 1, py::arg("a_select") = false, py::arg("a_word_mode") = false)
        .def("move_right",
            &TextEditor::MoveRight, py::arg("a_amount") = 1, py::arg("a_select") = false, py::arg("a_word_mode") = false)
        .def("move_top",
            &TextEditor::MoveTop, py::arg("a_select") = false)
        .def("move_bottom",
            &TextEditor::MoveBottom, py::arg("a_select") = false)
        .def("move_home",
            &TextEditor::MoveHome, py::arg("a_select") = false)
        .def("move_end",
            &TextEditor::MoveEnd, py::arg("a_select") = false)
        .def("set_selection_start",
            &TextEditor::SetSelectionStart, py::arg("a_position"))
        .def("set_selection_end",
            &TextEditor::SetSelectionEnd, py::arg("a_position"))
        .def("set_selection",
            &TextEditor::SetSelection, py::arg("a_start"), py::arg("a_end"), py::arg("a_mode") = TextEditor::SelectionMode::Normal)
        .def("select_word_under_cursor",
            &TextEditor::SelectWordUnderCursor)
        .def("select_all",
            &TextEditor::SelectAll)
        .def("has_selection",
            &TextEditor::HasSelection)
        .def("copy",
            &TextEditor::Copy)
        .def("cut",
            &TextEditor::Cut)
        .def("paste",
            &TextEditor::Paste)
        .def("delete",
            &TextEditor::Delete)
        .def("can_undo",
            &TextEditor::CanUndo)
        .def("can_redo",
            &TextEditor::CanRedo)
        .def("undo",
            &TextEditor::Undo, py::arg("a_steps") = 1)
        .def("redo",
            &TextEditor::Redo, py::arg("a_steps") = 1)
        .def_static("get_dark_palette",
            &TextEditor::GetDarkPalette)
        .def_static("get_light_palette",
            &TextEditor::GetLightPalette)
        .def_static("get_retro_blue_palette",
            &TextEditor::GetRetroBluePalette)
        ;
    ////////////////////    </generated_from:TextEditor.h>    ////////////////////


    ////////////////////    <generated_from:TextEditorBundle.h>    ////////////////////

    { // <namespace TextEditorBundle>
        py::module_ pyNsTextEditorBundle = m.def_submodule("text_editor_bundle", "");
        py::enum_<TextEditorBundle::SnippetLanguage>(pyNsTextEditorBundle, "SnippetLanguage", py::arithmetic(), "")
            .value("cpp", TextEditorBundle::SnippetLanguage::Cpp, "")
            .value("hlsl", TextEditorBundle::SnippetLanguage::Hlsl, "")
            .value("glsl", TextEditorBundle::SnippetLanguage::Glsl, "")
            .value("c", TextEditorBundle::SnippetLanguage::C, "")
            .value("sql", TextEditorBundle::SnippetLanguage::Sql, "")
            .value("angel_script", TextEditorBundle::SnippetLanguage::AngelScript, "")
            .value("lua", TextEditorBundle::SnippetLanguage::Lua, "")
            .value("python", TextEditorBundle::SnippetLanguage::Python, "");


        py::enum_<TextEditorBundle::EditorPalette>(pyNsTextEditorBundle, "EditorPalette", py::arithmetic(), "")
            .value("dark", TextEditorBundle::EditorPalette::Dark, "")
            .value("light", TextEditorBundle::EditorPalette::Light, "")
            .value("retro_blue", TextEditorBundle::EditorPalette::RetroBlue, "");


        pyNsTextEditorBundle.def("default_snippet_language",
            TextEditorBundle::DefaultSnippetLanguage, "DefaultSnippetLanguage will be Cpp or Python if using python bindings.");


        auto pyNsTextEditorBundle_ClassSnippetData =
            py::class_<TextEditorBundle::SnippetData>
                (pyNsTextEditorBundle, "SnippetData", "")
            .def(py::init<>([](
            std::string Code = "", TextEditorBundle::SnippetLanguage Language = TextEditorBundle::DefaultSnippetLanguage(), TextEditorBundle::EditorPalette Palette = TextEditorBundle::EditorPalette::Light, bool ShowCopyButton = true, bool ShowCursorPosition = true, std::string DisplayedFilename = {}, int HeightInLines = 0, int MaxHeightInLines = 40, bool ReadOnly = true, bool Border = false, bool DeIndentCode = true)
            {
                auto r = std::make_unique<TextEditorBundle::SnippetData>();
                r->Code = Code;
                r->Language = Language;
                r->Palette = Palette;
                r->ShowCopyButton = ShowCopyButton;
                r->ShowCursorPosition = ShowCursorPosition;
                r->DisplayedFilename = DisplayedFilename;
                r->HeightInLines = HeightInLines;
                r->MaxHeightInLines = MaxHeightInLines;
                r->ReadOnly = ReadOnly;
                r->Border = Border;
                r->DeIndentCode = DeIndentCode;
                return r;
            })
            , py::arg("code") = "", py::arg("language") = TextEditorBundle::DefaultSnippetLanguage(), py::arg("palette") = TextEditorBundle::EditorPalette::Light, py::arg("show_copy_button") = true, py::arg("show_cursor_position") = true, py::arg("displayed_filename") = std::string{}, py::arg("height_in_lines") = 0, py::arg("max_height_in_lines") = 40, py::arg("read_only") = true, py::arg("border") = false, py::arg("de_indent_code") = true
            )
            .def_readwrite("code", &TextEditorBundle::SnippetData::Code, "")
            .def_readwrite("language", &TextEditorBundle::SnippetData::Language, "")
            .def_readwrite("palette", &TextEditorBundle::SnippetData::Palette, "")
            .def_readwrite("show_copy_button", &TextEditorBundle::SnippetData::ShowCopyButton, "Displayed on top of the editor (Top Right corner)")
            .def_readwrite("show_cursor_position", &TextEditorBundle::SnippetData::ShowCursorPosition, "Show line and column number")
            .def_readwrite("displayed_filename", &TextEditorBundle::SnippetData::DisplayedFilename, "Displayed on top of the editor")
            .def_readwrite("height_in_lines", &TextEditorBundle::SnippetData::HeightInLines, "Number of visible lines in the editor")
            .def_readwrite("max_height_in_lines", &TextEditorBundle::SnippetData::MaxHeightInLines, "If the number of lines in the code exceeds this, the editor will scroll. Set to 0 to disable.")
            .def_readwrite("read_only", &TextEditorBundle::SnippetData::ReadOnly, "Snippets are read-only by default")
            .def_readwrite("border", &TextEditorBundle::SnippetData::Border, "Draw a border around the editor")
            .def_readwrite("de_indent_code", &TextEditorBundle::SnippetData::DeIndentCode, "Keep the code indentation, but remove main indentation,")
            ;


        pyNsTextEditorBundle.def("show_code_snippet",
            TextEditorBundle::ShowCodeSnippet, py::arg("snippet_data"), py::arg("width") = 0.f, py::arg("override_height_in_lines") = 0);

        pyNsTextEditorBundle.def("show_side_by_side_snippets",
            py::overload_cast<const TextEditorBundle::SnippetData &, const TextEditorBundle::SnippetData &, bool, bool>(TextEditorBundle::ShowSideBySideSnippets), py::arg("snippet1"), py::arg("snippet2"), py::arg("hide_if_empty") = true, py::arg("equal_visible_lines") = true);

        pyNsTextEditorBundle.def("show_side_by_side_snippets",
            py::overload_cast<const std::vector<SnippetData> &, bool, bool>(TextEditorBundle::ShowSideBySideSnippets), py::arg("snippets"), py::arg("hide_if_empty") = true, py::arg("equal_visible_lines") = true);
    } // </namespace TextEditorBundle>
    ////////////////////    </generated_from:TextEditorBundle.h>    ////////////////////

    // </litgen_pydef> // Autogenerated code end
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}
