// This file is automatically compiled into demos that are reference via cmake function add_auto_demo()

#include "immapp/immapp.h"
#include "demo_utils/api_demos.h"
#include "hello_imgui/internal/whereami/whereami_cpp.h"
#include <filesystem>
#include <iostream>

void ${demo_name}();


void ChdirBesideAssetsFolder()
{
    auto findDemoAssets = [](const std::filesystem::path& path) -> bool
    {
        if (std::filesystem::is_directory(path / DemosAssetsFolder()))
        {
            std::filesystem::current_path() = path;
            return true;
        }
        else
            return false;
    };

    // 1. Try to find demo assets in current folder
    const auto& currentPath = std::filesystem::current_path();
    if ( findDemoAssets(currentPath) )
        return;

    // 2. Try to find demo assets in current folder parent
    if (findDemoAssets(currentPath.parent_path()))
        return;

    // 3. Try to find demo assets in exe folder
    std::filesystem::path exeFolder(wai_getExecutableFolder_string());
    if (findDemoAssets(exeFolder))
        return;

    // 3. Try to find demo assets in exe folder parent (for MSVC Debug/ and Release/ folders)
    if (findDemoAssets(exeFolder.parent_path()))
        return;

    std::cerr << "Could not find " << DemosAssetsFolder() << " folder!\n";
}


int main()
{
    ChdirBesideAssetsFolder();
    HelloImGui::SetAssetsFolder(DemosAssetsFolder());

    HelloImGui::RunnerParams runnerParams;
    runnerParams.callbacks.ShowGui = ${demo_name};
    runnerParams.appWindowParams.windowGeometry.size = {1000, 800};
    runnerParams.appWindowParams.windowTitle = "${demo_name}";

    ImmApp::AddOnsParams addons;
    addons.withMarkdown = true;
    addons.withNodeEditor = true;
    addons.withImplot = true;
    addons.withTexInspect = true;

    ImmApp::Run(runnerParams, addons);
}
