from typing import List, Optional
from imgui_bundle.imgui import ImVec2
import enum


# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# <litgen_stub> // Autogenerated code below! Do not edit!
####################    <generated_from:ImCurveEditStl.h>    ####################
# THIS FILE WAS GENERATED AUTOMATICALLY. DO NOT EDIT.

#////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#                       ImGuizmoStl/ImCurveEditStl.h                                                           //
#//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#                       ImGuizmo/ImCurveEdit.h included by ImGuizmoStl/ImCurveEditStl.h                        //
#//////////////////////////////////////////////////////////////////////////////////////////////////////////////
# https://github.com/CedricGuillemet/ImGuizmo
# v 1.89 WIP
#
# The MIT License(MIT)
#
# Copyright(c) 2021 Cedric Guillemet
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files(the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions :
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#



#////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#                       ImGuizmoStl/ImCurveEditStl.h continued                                                 //
#//////////////////////////////////////////////////////////////////////////////////////////////////////////////



# <submodule ImCurveEdit>
class ImCurveEdit:  # Proxy class that introduces typings for the *submodule* ImCurveEdit
    pass  # (This corresponds to a C++ namespace. All method are static!)
    class CurveType(enum.Enum):
        curve_none = enum.auto()     # (= 0)
        curve_discrete = enum.auto() # (= 1)
        curve_linear = enum.auto()   # (= 2)
        curve_smooth = enum.auto()   # (= 3)
        curve_bezier = enum.auto()   # (= 4)

    class EditPoint:
        curve_index: int
        point_index: int
        def __lt__(self, other: EditPoint) -> bool:
            pass
        def __init__(self) -> None:
            """Autogenerated default constructor"""
            pass

    class Delegate:
        focused: bool = False
        def get_curve_count(self) -> int:                    # overridable (pure virtual)
            pass
        def is_visible(self, param_0: int) -> bool:          # overridable
            pass
        def get_curve_type(self, param_0: int) -> CurveType: # overridable
            pass
        def get_min(self) -> ImVec2:                         # overridable (pure virtual)
            pass
        def get_max(self) -> ImVec2:                         # overridable (pure virtual)
            pass
        def get_curve_color(                                 # overridable (pure virtual)
            self,
            curve_index: int
            ) -> int:
            pass
        def edit_point(                                      # overridable (pure virtual)
            self,
            curve_index: int,
            point_index: int,
            value: ImVec2
            ) -> int:
            pass
        def add_point(                                       # overridable (pure virtual)
            self,
            curve_index: int,
            value: ImVec2
            ) -> None:
            pass
        def get_background_color(self) -> int:               # overridable
            pass
        # handle undo/redo thru this functions
        def begin_edit(self, param_0: int) -> None:          # overridable
            pass
        def end_edit(self) -> None:                          # overridable
            pass
        def __init__(self) -> None:
            """Autogenerated default constructor"""
            pass


    class DelegateStl(ImCurveEdit.Delegate):

        def get_points_list( # overridable (pure virtual)
            self,
            curve_index: int
            ) -> List[ImVec2]:
            pass
        def __init__(self) -> None:
            """Autogenerated default constructor"""
            pass

    def edit_stl(
        delegate: DelegateStl,
        size: ImVec2,
        id: int,
        clipping_rect: Optional[ImRect] = None
        ) -> Tuple[int, List[EditPoint]]:
        pass


# </submodule ImCurveEdit>
####################    </generated_from:ImCurveEditStl.h>    ####################

# </litgen_stub> // Autogenerated code end!
