#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>
#include <pybind11/numpy.h>

#include "imgui_node_editor_internal.h"
#include "imgui_node_editor.h"


namespace py = pybind11;


namespace ax
{
    namespace NodeEditor
    {
        // using EditorContext = Detail::EditorContext;
        struct EditorContext: public Detail::EditorContext {};
    }
}

PYBIND11_MAKE_OPAQUE(ax::NodeEditor::Detail::EditorContext);
PYBIND11_MAKE_OPAQUE(ax::NodeEditor::EditorContext);


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// <litgen_glue_code>  // Autogenerated code below! Do not edit!

// </litgen_glue_code> // Autogenerated code end
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


void py_init_module_imgui_node_editor(py::module& m)
{
    py::class_<ax::NodeEditor::EditorContext>(m, "EditorContext");

    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // <litgen_pydef> // Autogenerated code below! Do not edit!
    ////////////////////    <generated_from:imgui_node_editor.h>    ////////////////////

    { // <namespace ax>
        py::module_ pyNsax = m.def_submodule("ax", "------------------------------------------------------------------------------");
        { // <namespace NodeEditor>
            py::module_ pyNsax_NsNodeEditor = pyNsax.def_submodule("NodeEditor", "namespace Editor");
            py::enum_<ax::NodeEditor::PinKind>(pyNsax_NsNodeEditor, "PinKind", py::arithmetic(), "------------------------------------------------------------------------------")
                .value("input", ax::NodeEditor::PinKind::Input, "")
                .value("output", ax::NodeEditor::PinKind::Output, "");


            py::enum_<ax::NodeEditor::FlowDirection>(pyNsax_NsNodeEditor, "FlowDirection", py::arithmetic(), "")
                .value("forward", ax::NodeEditor::FlowDirection::Forward, "")
                .value("backward", ax::NodeEditor::FlowDirection::Backward, "");


            py::enum_<ax::NodeEditor::CanvasSizeMode>(pyNsax_NsNodeEditor, "CanvasSizeMode", py::arithmetic(), "")
                .value("fit_vertical_view", ax::NodeEditor::CanvasSizeMode::FitVerticalView, "Previous view will be scaled to fit new view on Y axis")
                .value("fit_horizontal_view", ax::NodeEditor::CanvasSizeMode::FitHorizontalView, "Previous view will be scaled to fit new view on X axis")
                .value("center_only", ax::NodeEditor::CanvasSizeMode::CenterOnly, "Previous view will be centered on new view");


            auto pyNsax_NsNodeEditor_ClassConfig =
                py::class_<ax::NodeEditor::Config>
                    (pyNsax_NsNodeEditor, "Config", "")
                .def_readonly("settings_file", &ax::NodeEditor::Config::SettingsFile, "")
                .def_readwrite("user_pointer", &ax::NodeEditor::Config::UserPointer, "")
                .def_readwrite("custom_zoom_levels", &ax::NodeEditor::Config::CustomZoomLevels, "")
                .def_readwrite("canvas_size_mode", &ax::NodeEditor::Config::CanvasSizeMode, "")
                .def_readwrite("drag_button_index", &ax::NodeEditor::Config::DragButtonIndex, "Mouse button index drag action will react to (0-left, 1-right, 2-middle)")
                .def_readwrite("select_button_index", &ax::NodeEditor::Config::SelectButtonIndex, "Mouse button index select action will react to (0-left, 1-right, 2-middle)")
                .def_readwrite("navigate_button_index", &ax::NodeEditor::Config::NavigateButtonIndex, "Mouse button index navigate action will react to (0-left, 1-right, 2-middle)")
                .def_readwrite("context_menu_button_index", &ax::NodeEditor::Config::ContextMenuButtonIndex, "Mouse button index context menu action will react to (0-left, 1-right, 2-middle)")
                .def(py::init<>())
                ;


            py::enum_<ax::NodeEditor::StyleColor>(pyNsax_NsNodeEditor, "StyleColor", py::arithmetic(), "------------------------------------------------------------------------------")
                .value("bg", ax::NodeEditor::StyleColor_Bg, "")
                .value("grid", ax::NodeEditor::StyleColor_Grid, "")
                .value("node_bg", ax::NodeEditor::StyleColor_NodeBg, "")
                .value("node_border", ax::NodeEditor::StyleColor_NodeBorder, "")
                .value("hov_node_border", ax::NodeEditor::StyleColor_HovNodeBorder, "")
                .value("sel_node_border", ax::NodeEditor::StyleColor_SelNodeBorder, "")
                .value("node_sel_rect", ax::NodeEditor::StyleColor_NodeSelRect, "")
                .value("node_sel_rect_border", ax::NodeEditor::StyleColor_NodeSelRectBorder, "")
                .value("hov_link_border", ax::NodeEditor::StyleColor_HovLinkBorder, "")
                .value("sel_link_border", ax::NodeEditor::StyleColor_SelLinkBorder, "")
                .value("highlight_link_border", ax::NodeEditor::StyleColor_HighlightLinkBorder, "")
                .value("link_sel_rect", ax::NodeEditor::StyleColor_LinkSelRect, "")
                .value("link_sel_rect_border", ax::NodeEditor::StyleColor_LinkSelRectBorder, "")
                .value("pin_rect", ax::NodeEditor::StyleColor_PinRect, "")
                .value("pin_rect_border", ax::NodeEditor::StyleColor_PinRectBorder, "")
                .value("flow", ax::NodeEditor::StyleColor_Flow, "")
                .value("flow_marker", ax::NodeEditor::StyleColor_FlowMarker, "")
                .value("group_bg", ax::NodeEditor::StyleColor_GroupBg, "")
                .value("group_border", ax::NodeEditor::StyleColor_GroupBorder, "")
                .value("count", ax::NodeEditor::StyleColor_Count, "");


            py::enum_<ax::NodeEditor::StyleVar>(pyNsax_NsNodeEditor, "StyleVar", py::arithmetic(), "")
                .value("node_padding", ax::NodeEditor::StyleVar_NodePadding, "")
                .value("node_rounding", ax::NodeEditor::StyleVar_NodeRounding, "")
                .value("node_border_width", ax::NodeEditor::StyleVar_NodeBorderWidth, "")
                .value("hovered_node_border_width", ax::NodeEditor::StyleVar_HoveredNodeBorderWidth, "")
                .value("selected_node_border_width", ax::NodeEditor::StyleVar_SelectedNodeBorderWidth, "")
                .value("pin_rounding", ax::NodeEditor::StyleVar_PinRounding, "")
                .value("pin_border_width", ax::NodeEditor::StyleVar_PinBorderWidth, "")
                .value("link_strength", ax::NodeEditor::StyleVar_LinkStrength, "")
                .value("source_direction", ax::NodeEditor::StyleVar_SourceDirection, "")
                .value("target_direction", ax::NodeEditor::StyleVar_TargetDirection, "")
                .value("scroll_duration", ax::NodeEditor::StyleVar_ScrollDuration, "")
                .value("flow_marker_distance", ax::NodeEditor::StyleVar_FlowMarkerDistance, "")
                .value("flow_speed", ax::NodeEditor::StyleVar_FlowSpeed, "")
                .value("flow_duration", ax::NodeEditor::StyleVar_FlowDuration, "")
                .value("pivot_alignment", ax::NodeEditor::StyleVar_PivotAlignment, "")
                .value("pivot_size", ax::NodeEditor::StyleVar_PivotSize, "")
                .value("pivot_scale", ax::NodeEditor::StyleVar_PivotScale, "")
                .value("pin_corners", ax::NodeEditor::StyleVar_PinCorners, "")
                .value("pin_radius", ax::NodeEditor::StyleVar_PinRadius, "")
                .value("pin_arrow_size", ax::NodeEditor::StyleVar_PinArrowSize, "")
                .value("pin_arrow_width", ax::NodeEditor::StyleVar_PinArrowWidth, "")
                .value("group_rounding", ax::NodeEditor::StyleVar_GroupRounding, "")
                .value("group_border_width", ax::NodeEditor::StyleVar_GroupBorderWidth, "")
                .value("highlight_connected_links", ax::NodeEditor::StyleVar_HighlightConnectedLinks, "")
                .value("snap_link_to_pin_dir", ax::NodeEditor::StyleVar_SnapLinkToPinDir, "")
                .value("count", ax::NodeEditor::StyleVar_Count, "");


            auto pyNsax_NsNodeEditor_ClassStyle =
                py::class_<ax::NodeEditor::Style>
                    (pyNsax_NsNodeEditor, "Style", "")
                .def_readwrite("node_padding", &ax::NodeEditor::Style::NodePadding, "")
                .def_readwrite("node_rounding", &ax::NodeEditor::Style::NodeRounding, "")
                .def_readwrite("node_border_width", &ax::NodeEditor::Style::NodeBorderWidth, "")
                .def_readwrite("hovered_node_border_width", &ax::NodeEditor::Style::HoveredNodeBorderWidth, "")
                .def_readwrite("selected_node_border_width", &ax::NodeEditor::Style::SelectedNodeBorderWidth, "")
                .def_readwrite("pin_rounding", &ax::NodeEditor::Style::PinRounding, "")
                .def_readwrite("pin_border_width", &ax::NodeEditor::Style::PinBorderWidth, "")
                .def_readwrite("link_strength", &ax::NodeEditor::Style::LinkStrength, "")
                .def_readwrite("source_direction", &ax::NodeEditor::Style::SourceDirection, "")
                .def_readwrite("target_direction", &ax::NodeEditor::Style::TargetDirection, "")
                .def_readwrite("scroll_duration", &ax::NodeEditor::Style::ScrollDuration, "")
                .def_readwrite("flow_marker_distance", &ax::NodeEditor::Style::FlowMarkerDistance, "")
                .def_readwrite("flow_speed", &ax::NodeEditor::Style::FlowSpeed, "")
                .def_readwrite("flow_duration", &ax::NodeEditor::Style::FlowDuration, "")
                .def_readwrite("pivot_alignment", &ax::NodeEditor::Style::PivotAlignment, "")
                .def_readwrite("pivot_size", &ax::NodeEditor::Style::PivotSize, "")
                .def_readwrite("pivot_scale", &ax::NodeEditor::Style::PivotScale, "")
                .def_readwrite("pin_corners", &ax::NodeEditor::Style::PinCorners, "")
                .def_readwrite("pin_radius", &ax::NodeEditor::Style::PinRadius, "")
                .def_readwrite("pin_arrow_size", &ax::NodeEditor::Style::PinArrowSize, "")
                .def_readwrite("pin_arrow_width", &ax::NodeEditor::Style::PinArrowWidth, "")
                .def_readwrite("group_rounding", &ax::NodeEditor::Style::GroupRounding, "")
                .def_readwrite("group_border_width", &ax::NodeEditor::Style::GroupBorderWidth, "")
                .def_readwrite("highlight_connected_links", &ax::NodeEditor::Style::HighlightConnectedLinks, "")
                .def_readwrite("snap_link_to_pin_dir", &ax::NodeEditor::Style::SnapLinkToPinDir, "when True link will start on the line defined by pin direction")
                .def(py::init<>())
                ;


            pyNsax_NsNodeEditor.def("set_current_editor",
                ax::NodeEditor::SetCurrentEditor, py::arg("ctx"));

            pyNsax_NsNodeEditor.def("get_current_editor",
                ax::NodeEditor::GetCurrentEditor);

            pyNsax_NsNodeEditor.def("create_editor",
                ax::NodeEditor::CreateEditor, py::arg("config") = py::none());

            pyNsax_NsNodeEditor.def("destroy_editor",
                ax::NodeEditor::DestroyEditor, py::arg("ctx"));

            pyNsax_NsNodeEditor.def("get_config",
                ax::NodeEditor::GetConfig, py::arg("ctx") = py::none());

            pyNsax_NsNodeEditor.def("get_style",
                ax::NodeEditor::GetStyle);

            pyNsax_NsNodeEditor.def("get_style_color_name",
                ax::NodeEditor::GetStyleColorName, py::arg("color_index"));

            pyNsax_NsNodeEditor.def("push_style_color",
                ax::NodeEditor::PushStyleColor, py::arg("color_index"), py::arg("color"));

            pyNsax_NsNodeEditor.def("pop_style_color",
                ax::NodeEditor::PopStyleColor, py::arg("count") = 1);

            pyNsax_NsNodeEditor.def("push_style_var",
                py::overload_cast<ax::NodeEditor::StyleVar, float>(ax::NodeEditor::PushStyleVar), py::arg("var_index"), py::arg("value"));

            pyNsax_NsNodeEditor.def("push_style_var",
                py::overload_cast<ax::NodeEditor::StyleVar, const ImVec2 &>(ax::NodeEditor::PushStyleVar), py::arg("var_index"), py::arg("value"));

            pyNsax_NsNodeEditor.def("push_style_var",
                py::overload_cast<ax::NodeEditor::StyleVar, const ImVec4 &>(ax::NodeEditor::PushStyleVar), py::arg("var_index"), py::arg("value"));

            pyNsax_NsNodeEditor.def("pop_style_var",
                ax::NodeEditor::PopStyleVar, py::arg("count") = 1);

            pyNsax_NsNodeEditor.def("begin",
                ax::NodeEditor::Begin, py::arg("id"), py::arg("size") = ImVec2(0, 0));

            pyNsax_NsNodeEditor.def("end",
                ax::NodeEditor::End);

            pyNsax_NsNodeEditor.def("begin_node",
                ax::NodeEditor::BeginNode, py::arg("id"));

            pyNsax_NsNodeEditor.def("begin_pin",
                ax::NodeEditor::BeginPin, py::arg("id"), py::arg("kind"));

            pyNsax_NsNodeEditor.def("pin_rect",
                ax::NodeEditor::PinRect, py::arg("a"), py::arg("b"));

            pyNsax_NsNodeEditor.def("pin_pivot_rect",
                ax::NodeEditor::PinPivotRect, py::arg("a"), py::arg("b"));

            pyNsax_NsNodeEditor.def("pin_pivot_size",
                ax::NodeEditor::PinPivotSize, py::arg("size"));

            pyNsax_NsNodeEditor.def("pin_pivot_scale",
                ax::NodeEditor::PinPivotScale, py::arg("scale"));

            pyNsax_NsNodeEditor.def("pin_pivot_alignment",
                ax::NodeEditor::PinPivotAlignment, py::arg("alignment"));

            pyNsax_NsNodeEditor.def("end_pin",
                ax::NodeEditor::EndPin);

            pyNsax_NsNodeEditor.def("group",
                ax::NodeEditor::Group, py::arg("size"));

            pyNsax_NsNodeEditor.def("end_node",
                ax::NodeEditor::EndNode);

            pyNsax_NsNodeEditor.def("begin_group_hint",
                ax::NodeEditor::BeginGroupHint, py::arg("node_id"));

            pyNsax_NsNodeEditor.def("get_group_min",
                ax::NodeEditor::GetGroupMin);

            pyNsax_NsNodeEditor.def("get_group_max",
                ax::NodeEditor::GetGroupMax);

            pyNsax_NsNodeEditor.def("get_hint_foreground_draw_list",
                ax::NodeEditor::GetHintForegroundDrawList);

            pyNsax_NsNodeEditor.def("get_hint_background_draw_list",
                ax::NodeEditor::GetHintBackgroundDrawList);

            pyNsax_NsNodeEditor.def("end_group_hint",
                ax::NodeEditor::EndGroupHint);

            pyNsax_NsNodeEditor.def("get_node_background_draw_list",
                ax::NodeEditor::GetNodeBackgroundDrawList,
                py::arg("node_id"),
                "TODO: Add a way to manage node background channels");

            pyNsax_NsNodeEditor.def("link",
                ax::NodeEditor::Link, py::arg("id"), py::arg("start_pin_id"), py::arg("end_pin_id"), py::arg("color") = ImVec4(1, 1, 1, 1), py::arg("thickness") = 1.0f);

            pyNsax_NsNodeEditor.def("flow",
                ax::NodeEditor::Flow, py::arg("link_id"), py::arg("direction") = ax::NodeEditor::FlowDirection::Forward);

            pyNsax_NsNodeEditor.def("begin_create",
                ax::NodeEditor::BeginCreate, py::arg("color") = ImVec4(1, 1, 1, 1), py::arg("thickness") = 1.0f);

            pyNsax_NsNodeEditor.def("query_new_link",
                py::overload_cast<ax::NodeEditor::PinId *, ax::NodeEditor::PinId *>(ax::NodeEditor::QueryNewLink), py::arg("start_id"), py::arg("end_id"));

            pyNsax_NsNodeEditor.def("query_new_link",
                py::overload_cast<ax::NodeEditor::PinId *, ax::NodeEditor::PinId *, const ImVec4 &, float>(ax::NodeEditor::QueryNewLink), py::arg("start_id"), py::arg("end_id"), py::arg("color"), py::arg("thickness") = 1.0f);

            pyNsax_NsNodeEditor.def("query_new_node",
                py::overload_cast<ax::NodeEditor::PinId *>(ax::NodeEditor::QueryNewNode), py::arg("pin_id"));

            pyNsax_NsNodeEditor.def("query_new_node",
                py::overload_cast<ax::NodeEditor::PinId *, const ImVec4 &, float>(ax::NodeEditor::QueryNewNode), py::arg("pin_id"), py::arg("color"), py::arg("thickness") = 1.0f);

            pyNsax_NsNodeEditor.def("accept_new_item",
                py::overload_cast<>(ax::NodeEditor::AcceptNewItem));

            pyNsax_NsNodeEditor.def("accept_new_item",
                py::overload_cast<const ImVec4 &, float>(ax::NodeEditor::AcceptNewItem), py::arg("color"), py::arg("thickness") = 1.0f);

            pyNsax_NsNodeEditor.def("reject_new_item",
                py::overload_cast<>(ax::NodeEditor::RejectNewItem));

            pyNsax_NsNodeEditor.def("reject_new_item",
                py::overload_cast<const ImVec4 &, float>(ax::NodeEditor::RejectNewItem), py::arg("color"), py::arg("thickness") = 1.0f);

            pyNsax_NsNodeEditor.def("end_create",
                ax::NodeEditor::EndCreate);

            pyNsax_NsNodeEditor.def("begin_delete",
                ax::NodeEditor::BeginDelete);

            pyNsax_NsNodeEditor.def("query_deleted_link",
                ax::NodeEditor::QueryDeletedLink, py::arg("link_id"), py::arg("start_id") = py::none(), py::arg("end_id") = py::none());

            pyNsax_NsNodeEditor.def("query_deleted_node",
                ax::NodeEditor::QueryDeletedNode, py::arg("node_id"));

            pyNsax_NsNodeEditor.def("accept_deleted_item",
                ax::NodeEditor::AcceptDeletedItem, py::arg("delete_dependencies") = true);

            pyNsax_NsNodeEditor.def("reject_deleted_item",
                ax::NodeEditor::RejectDeletedItem);

            pyNsax_NsNodeEditor.def("end_delete",
                ax::NodeEditor::EndDelete);

            pyNsax_NsNodeEditor.def("set_node_position",
                ax::NodeEditor::SetNodePosition, py::arg("node_id"), py::arg("editor_position"));

            pyNsax_NsNodeEditor.def("set_group_size",
                ax::NodeEditor::SetGroupSize, py::arg("node_id"), py::arg("size"));

            pyNsax_NsNodeEditor.def("get_node_position",
                ax::NodeEditor::GetNodePosition, py::arg("node_id"));

            pyNsax_NsNodeEditor.def("get_node_size",
                ax::NodeEditor::GetNodeSize, py::arg("node_id"));

            pyNsax_NsNodeEditor.def("center_node_on_screen",
                ax::NodeEditor::CenterNodeOnScreen, py::arg("node_id"));

            pyNsax_NsNodeEditor.def("set_node_z_position",
                ax::NodeEditor::SetNodeZPosition,
                py::arg("node_id"), py::arg("z"),
                "Sets node z position, nodes with higher value are drawn over nodes with lower value");

            pyNsax_NsNodeEditor.def("get_node_z_position",
                ax::NodeEditor::GetNodeZPosition,
                py::arg("node_id"),
                "Returns node z position, defaults is 0.0");

            pyNsax_NsNodeEditor.def("restore_node_state",
                ax::NodeEditor::RestoreNodeState, py::arg("node_id"));

            pyNsax_NsNodeEditor.def("suspend",
                ax::NodeEditor::Suspend);

            pyNsax_NsNodeEditor.def("resume",
                ax::NodeEditor::Resume);

            pyNsax_NsNodeEditor.def("is_suspended",
                ax::NodeEditor::IsSuspended);

            pyNsax_NsNodeEditor.def("is_active",
                ax::NodeEditor::IsActive);

            pyNsax_NsNodeEditor.def("has_selection_changed",
                ax::NodeEditor::HasSelectionChanged);

            pyNsax_NsNodeEditor.def("get_selected_object_count",
                ax::NodeEditor::GetSelectedObjectCount);

            pyNsax_NsNodeEditor.def("get_selected_nodes",
                ax::NodeEditor::GetSelectedNodes, py::arg("nodes"), py::arg("size"));

            pyNsax_NsNodeEditor.def("get_selected_links",
                ax::NodeEditor::GetSelectedLinks, py::arg("links"), py::arg("size"));

            pyNsax_NsNodeEditor.def("is_node_selected",
                ax::NodeEditor::IsNodeSelected, py::arg("node_id"));

            pyNsax_NsNodeEditor.def("is_link_selected",
                ax::NodeEditor::IsLinkSelected, py::arg("link_id"));

            pyNsax_NsNodeEditor.def("clear_selection",
                ax::NodeEditor::ClearSelection);

            pyNsax_NsNodeEditor.def("select_node",
                ax::NodeEditor::SelectNode, py::arg("node_id"), py::arg("append") = false);

            pyNsax_NsNodeEditor.def("select_link",
                ax::NodeEditor::SelectLink, py::arg("link_id"), py::arg("append") = false);

            pyNsax_NsNodeEditor.def("deselect_node",
                ax::NodeEditor::DeselectNode, py::arg("node_id"));

            pyNsax_NsNodeEditor.def("deselect_link",
                ax::NodeEditor::DeselectLink, py::arg("link_id"));

            pyNsax_NsNodeEditor.def("delete_node",
                ax::NodeEditor::DeleteNode, py::arg("node_id"));

            pyNsax_NsNodeEditor.def("delete_link",
                ax::NodeEditor::DeleteLink, py::arg("link_id"));

            pyNsax_NsNodeEditor.def("has_any_links",
                py::overload_cast<ax::NodeEditor::NodeId>(ax::NodeEditor::HasAnyLinks),
                py::arg("node_id"),
                "Returns True if node has any link connected");

            pyNsax_NsNodeEditor.def("has_any_links",
                py::overload_cast<ax::NodeEditor::PinId>(ax::NodeEditor::HasAnyLinks),
                py::arg("pin_id"),
                "Return True if pin has any link connected");

            pyNsax_NsNodeEditor.def("break_links",
                py::overload_cast<ax::NodeEditor::NodeId>(ax::NodeEditor::BreakLinks),
                py::arg("node_id"),
                "Break all links connected to this node");

            pyNsax_NsNodeEditor.def("break_links",
                py::overload_cast<ax::NodeEditor::PinId>(ax::NodeEditor::BreakLinks),
                py::arg("pin_id"),
                "Break all links connected to this pin");

            pyNsax_NsNodeEditor.def("navigate_to_content",
                ax::NodeEditor::NavigateToContent, py::arg("duration") = -1);

            pyNsax_NsNodeEditor.def("navigate_to_selection",
                ax::NodeEditor::NavigateToSelection, py::arg("zoom_in") = false, py::arg("duration") = -1);

            pyNsax_NsNodeEditor.def("show_node_context_menu",
                ax::NodeEditor::ShowNodeContextMenu, py::arg("node_id"));

            pyNsax_NsNodeEditor.def("show_pin_context_menu",
                ax::NodeEditor::ShowPinContextMenu, py::arg("pin_id"));

            pyNsax_NsNodeEditor.def("show_link_context_menu",
                ax::NodeEditor::ShowLinkContextMenu, py::arg("link_id"));

            pyNsax_NsNodeEditor.def("show_background_context_menu",
                ax::NodeEditor::ShowBackgroundContextMenu);

            pyNsax_NsNodeEditor.def("enable_shortcuts",
                ax::NodeEditor::EnableShortcuts, py::arg("enable"));

            pyNsax_NsNodeEditor.def("are_shortcuts_enabled",
                ax::NodeEditor::AreShortcutsEnabled);

            pyNsax_NsNodeEditor.def("begin_shortcut",
                ax::NodeEditor::BeginShortcut);

            pyNsax_NsNodeEditor.def("accept_cut",
                ax::NodeEditor::AcceptCut);

            pyNsax_NsNodeEditor.def("accept_copy",
                ax::NodeEditor::AcceptCopy);

            pyNsax_NsNodeEditor.def("accept_paste",
                ax::NodeEditor::AcceptPaste);

            pyNsax_NsNodeEditor.def("accept_duplicate",
                ax::NodeEditor::AcceptDuplicate);

            pyNsax_NsNodeEditor.def("accept_create_node",
                ax::NodeEditor::AcceptCreateNode);

            pyNsax_NsNodeEditor.def("get_action_context_size",
                ax::NodeEditor::GetActionContextSize);

            pyNsax_NsNodeEditor.def("get_action_context_nodes",
                ax::NodeEditor::GetActionContextNodes, py::arg("nodes"), py::arg("size"));

            pyNsax_NsNodeEditor.def("get_action_context_links",
                ax::NodeEditor::GetActionContextLinks, py::arg("links"), py::arg("size"));

            pyNsax_NsNodeEditor.def("end_shortcut",
                ax::NodeEditor::EndShortcut);

            pyNsax_NsNodeEditor.def("get_current_zoom",
                ax::NodeEditor::GetCurrentZoom);

            pyNsax_NsNodeEditor.def("get_hovered_node",
                ax::NodeEditor::GetHoveredNode);

            pyNsax_NsNodeEditor.def("get_hovered_pin",
                ax::NodeEditor::GetHoveredPin);

            pyNsax_NsNodeEditor.def("get_hovered_link",
                ax::NodeEditor::GetHoveredLink);

            pyNsax_NsNodeEditor.def("get_double_clicked_node",
                ax::NodeEditor::GetDoubleClickedNode);

            pyNsax_NsNodeEditor.def("get_double_clicked_pin",
                ax::NodeEditor::GetDoubleClickedPin);

            pyNsax_NsNodeEditor.def("get_double_clicked_link",
                ax::NodeEditor::GetDoubleClickedLink);

            pyNsax_NsNodeEditor.def("is_background_clicked",
                ax::NodeEditor::IsBackgroundClicked);

            pyNsax_NsNodeEditor.def("is_background_double_clicked",
                ax::NodeEditor::IsBackgroundDoubleClicked);

            pyNsax_NsNodeEditor.def("get_background_click_button_index",
                ax::NodeEditor::GetBackgroundClickButtonIndex, "-1 if none");

            pyNsax_NsNodeEditor.def("get_background_double_click_button_index",
                ax::NodeEditor::GetBackgroundDoubleClickButtonIndex, "-1 if none");

            pyNsax_NsNodeEditor.def("get_link_pins",
                ax::NodeEditor::GetLinkPins,
                py::arg("link_id"), py::arg("start_pin_id"), py::arg("end_pin_id"),
                "pass None if particular pin do not interest you");

            pyNsax_NsNodeEditor.def("pin_had_any_links",
                ax::NodeEditor::PinHadAnyLinks, py::arg("pin_id"));

            pyNsax_NsNodeEditor.def("get_screen_size",
                ax::NodeEditor::GetScreenSize);

            pyNsax_NsNodeEditor.def("screen_to_canvas",
                ax::NodeEditor::ScreenToCanvas, py::arg("pos"));

            pyNsax_NsNodeEditor.def("canvas_to_screen",
                ax::NodeEditor::CanvasToScreen, py::arg("pos"));

            pyNsax_NsNodeEditor.def("get_node_count",
                ax::NodeEditor::GetNodeCount, "Returns number of submitted nodes since Begin() call");

            pyNsax_NsNodeEditor.def("get_ordered_node_ids",
                ax::NodeEditor::GetOrderedNodeIds,
                py::arg("nodes"), py::arg("size"),
                "Fills an array with node id's in order they're drawn; up to 'size` elements are set. Returns actual size of filled id's.");


            auto pyNsax_NsNodeEditor_ClassNodeId =
                py::class_<ax::NodeEditor::NodeId>
                    (pyNsax_NsNodeEditor, "NodeId", py::is_final(), "\n(final class)")
                .def(py::init<>()) // implicit default constructor
                ;


            auto pyNsax_NsNodeEditor_ClassLinkId =
                py::class_<ax::NodeEditor::LinkId>
                    (pyNsax_NsNodeEditor, "LinkId", py::is_final(), "\n(final class)")
                .def(py::init<>()) // implicit default constructor
                ;


            auto pyNsax_NsNodeEditor_ClassPinId =
                py::class_<ax::NodeEditor::PinId>
                    (pyNsax_NsNodeEditor, "PinId", py::is_final(), "\n(final class)")
                .def(py::init<>()) // implicit default constructor
                ;
        } // </namespace NodeEditor>

    } // </namespace ax>
    ////////////////////    </generated_from:imgui_node_editor.h>    ////////////////////

    // </litgen_pydef> // Autogenerated code end
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}