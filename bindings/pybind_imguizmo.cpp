#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "imgui_internal.h"
#include "ImGuizmoStl/ImCurveEditStl.h"
#include "ImGuizmoStl/ImGradientStl.h"


namespace py = pybind11;


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// <litgen_glue_code>  // Autogenerated code below! Do not edit!

namespace ImGradient {
// helper type to enable overriding virtual methods in python
class Delegate_trampoline : public Delegate
{
public:
    using Delegate::Delegate;

    size_t GetPointCount() override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            size_t, // return type
            ImGradient::Delegate, // parent class
            "get_point_count", // function name (python)
            GetPointCount // function name (c++)
        );
    }
    ImVec4 * GetPoints() override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            ImVec4 *, // return type
            ImGradient::Delegate, // parent class
            "get_points", // function name (python)
            GetPoints // function name (c++)
        );
    }
    int EditPoint(int pointIndex, ImVec4 value) override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            int, // return type
            ImGradient::Delegate, // parent class
            "edit_point", // function name (python)
            EditPoint, // function name (c++)
            pointIndex, value // params
        );
    }
    ImVec4 GetPoint(float t) override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            ImVec4, // return type
            ImGradient::Delegate, // parent class
            "get_point", // function name (python)
            GetPoint, // function name (c++)
            t // params
        );
    }
    void AddPoint(ImVec4 value) override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            void, // return type
            ImGradient::Delegate, // parent class
            "add_point", // function name (python)
            AddPoint, // function name (c++)
            value // params
        );
    }
};
}  // namespace ImGradient

namespace ImGradient {
// helper type to enable overriding virtual methods in python
class DelegateStl_trampoline : public DelegateStl
{
public:
    using DelegateStl::DelegateStl;

    size_t GetPointCount() override
    {
        PYBIND11_OVERRIDE_NAME(
            size_t, // return type
            ImGradient::DelegateStl, // parent class
            "get_point_count", // function name (python)
            GetPointCount // function name (c++)
        );
    }
    ImVec4 * GetPoints() override
    {
        PYBIND11_OVERRIDE_NAME(
            ImVec4 *, // return type
            ImGradient::DelegateStl, // parent class
            "get_points", // function name (python)
            GetPoints // function name (c++)
        );
    }
    std::vector<ImVec4> & GetPointsList() override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            std::vector<ImVec4> &, // return type
            ImGradient::DelegateStl, // parent class
            "get_points_list", // function name (python)
            GetPointsList // function name (c++)
        );
    }
    int EditPoint(int pointIndex, ImVec4 value) override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            int, // return type
            ImGradient::DelegateStl, // parent class
            "edit_point", // function name (python)
            EditPoint, // function name (c++)
            pointIndex, value // params
        );
    }
    ImVec4 GetPoint(float t) override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            ImVec4, // return type
            ImGradient::DelegateStl, // parent class
            "get_point", // function name (python)
            GetPoint, // function name (c++)
            t // params
        );
    }
    void AddPoint(ImVec4 value) override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            void, // return type
            ImGradient::DelegateStl, // parent class
            "add_point", // function name (python)
            AddPoint, // function name (c++)
            value // params
        );
    }
};
}  // namespace ImGradient

// </litgen_glue_code> // Autogenerated code end
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



void py_init_module_imguizmo(py::module& m)
{
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // <litgen_pydef> // Autogenerated code below! Do not edit!
    ////////////////////    <generated_from:ImGradientStl.h>    ////////////////////

    { // <namespace ImGradient>
        py::module_ pyNsImGradient = m.def_submodule("ImGradient", "");
        auto pyNsImGradient_ClassDelegate =
            py::class_<ImGradient::Delegate, ImGradient::Delegate_trampoline>
                (pyNsImGradient, "Delegate", "")
            .def(py::init<>()) // implicit default constructor
            .def("edit_point",
                &ImGradient::Delegate::EditPoint, py::arg("point_index"), py::arg("value"))
            .def("get_point",
                &ImGradient::Delegate::GetPoint, py::arg("t"))
            .def("add_point",
                &ImGradient::Delegate::AddPoint, py::arg("value"))
            ;
        auto pyNsImGradient_ClassDelegateStl =
            py::class_<ImGradient::DelegateStl, ImGradient::Delegate, ImGradient::DelegateStl_trampoline>
                (pyNsImGradient, "DelegateStl", "")
            .def(py::init<>()) // implicit default constructor
            .def("get_points_list",
                &ImGradient::DelegateStl::GetPointsList)
            ;


        pyNsImGradient.def("edit_stl",
            ImGradient::EditStl, py::arg("delegate"), py::arg("size"));
    } // </namespace ImGradient>
    ////////////////////    </generated_from:ImGradientStl.h>    ////////////////////

    // </litgen_pydef> // Autogenerated code end
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}
