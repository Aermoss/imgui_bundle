#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>


#include "imgui_internal.h"
#include "ImGuizmoStl/ImCurveEditStl.h"
namespace py = pybind11;


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// <litgen_glue_code>  // Autogenerated code below! Do not edit!

namespace ImCurveEdit {
// helper type to enable overriding virtual methods in python
class Delegate_trampoline : public Delegate
{
public:
    using Delegate::Delegate;

    size_t GetCurveCount() override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            size_t, // return type
            ImCurveEdit::Delegate, // parent class
            "get_curve_count", // function name (python)
            GetCurveCount // function name (c++)
        );
    }
    bool IsVisible(size_t param_0) override
    {
        PYBIND11_OVERRIDE_NAME(
            bool, // return type
            ImCurveEdit::Delegate, // parent class
            "is_visible", // function name (python)
            IsVisible, // function name (c++)
            param_0 // params
        );
    }
    ImCurveEdit::CurveType GetCurveType(size_t param_0) const override
    {
        PYBIND11_OVERRIDE_NAME(
            ImCurveEdit::CurveType, // return type
            ImCurveEdit::Delegate, // parent class
            "get_curve_type", // function name (python)
            GetCurveType, // function name (c++)
            param_0 // params
        );
    }
    ImVec2 & GetMin() override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            ImVec2 &, // return type
            ImCurveEdit::Delegate, // parent class
            "get_min", // function name (python)
            GetMin // function name (c++)
        );
    }
    ImVec2 & GetMax() override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            ImVec2 &, // return type
            ImCurveEdit::Delegate, // parent class
            "get_max", // function name (python)
            GetMax // function name (c++)
        );
    }
    size_t GetPointCount(size_t curveIndex) override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            size_t, // return type
            ImCurveEdit::Delegate, // parent class
            "get_point_count", // function name (python)
            GetPointCount, // function name (c++)
            curveIndex // params
        );
    }
    uint32_t GetCurveColor(size_t curveIndex) override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            uint32_t, // return type
            ImCurveEdit::Delegate, // parent class
            "get_curve_color", // function name (python)
            GetCurveColor, // function name (c++)
            curveIndex // params
        );
    }
    ImVec2 * GetPoints(size_t curveIndex) override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            ImVec2 *, // return type
            ImCurveEdit::Delegate, // parent class
            "get_points", // function name (python)
            GetPoints, // function name (c++)
            curveIndex // params
        );
    }
    int EditPoint(size_t curveIndex, int pointIndex, ImVec2 value) override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            int, // return type
            ImCurveEdit::Delegate, // parent class
            "edit_point", // function name (python)
            EditPoint, // function name (c++)
            curveIndex, pointIndex, value // params
        );
    }
    void AddPoint(size_t curveIndex, ImVec2 value) override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            void, // return type
            ImCurveEdit::Delegate, // parent class
            "add_point", // function name (python)
            AddPoint, // function name (c++)
            curveIndex, value // params
        );
    }
    unsigned int GetBackgroundColor() override
    {
        PYBIND11_OVERRIDE_NAME(
            unsigned int, // return type
            ImCurveEdit::Delegate, // parent class
            "get_background_color", // function name (python)
            GetBackgroundColor // function name (c++)
        );
    }
    void BeginEdit(int param_0) override
    {
        PYBIND11_OVERRIDE_NAME(
            void, // return type
            ImCurveEdit::Delegate, // parent class
            "begin_edit", // function name (python)
            BeginEdit, // function name (c++)
            param_0 // params
        );
    }
    void EndEdit() override
    {
        PYBIND11_OVERRIDE_NAME(
            void, // return type
            ImCurveEdit::Delegate, // parent class
            "end_edit", // function name (python)
            EndEdit // function name (c++)
        );
    }
};
}  // namespace ImCurveEdit

namespace ImCurveEdit {
// helper type to enable overriding virtual methods in python
class DelegateStl_trampoline : public DelegateStl
{
public:
    using DelegateStl::DelegateStl;

    size_t GetPointCount(size_t curveIndex) override
    {
        PYBIND11_OVERRIDE_NAME(
            size_t, // return type
            ImCurveEdit::DelegateStl, // parent class
            "get_point_count", // function name (python)
            GetPointCount, // function name (c++)
            curveIndex // params
        );
    }
    ImVec2 * GetPoints(size_t curveIndex) override
    {
        PYBIND11_OVERRIDE_NAME(
            ImVec2 *, // return type
            ImCurveEdit::DelegateStl, // parent class
            "get_points", // function name (python)
            GetPoints, // function name (c++)
            curveIndex // params
        );
    }
    std::vector<ImVec2> & GetPointsList(size_t curveIndex) override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            std::vector<ImVec2> &, // return type
            ImCurveEdit::DelegateStl, // parent class
            "get_points_list", // function name (python)
            GetPointsList, // function name (c++)
            curveIndex // params
        );
    }
    size_t GetCurveCount() override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            size_t, // return type
            ImCurveEdit::DelegateStl, // parent class
            "get_curve_count", // function name (python)
            GetCurveCount // function name (c++)
        );
    }
    bool IsVisible(size_t param_0) override
    {
        PYBIND11_OVERRIDE_NAME(
            bool, // return type
            ImCurveEdit::DelegateStl, // parent class
            "is_visible", // function name (python)
            IsVisible, // function name (c++)
            param_0 // params
        );
    }
    ImCurveEdit::CurveType GetCurveType(size_t param_0) const override
    {
        PYBIND11_OVERRIDE_NAME(
            ImCurveEdit::CurveType, // return type
            ImCurveEdit::DelegateStl, // parent class
            "get_curve_type", // function name (python)
            GetCurveType, // function name (c++)
            param_0 // params
        );
    }
    ImVec2 & GetMin() override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            ImVec2 &, // return type
            ImCurveEdit::DelegateStl, // parent class
            "get_min", // function name (python)
            GetMin // function name (c++)
        );
    }
    ImVec2 & GetMax() override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            ImVec2 &, // return type
            ImCurveEdit::DelegateStl, // parent class
            "get_max", // function name (python)
            GetMax // function name (c++)
        );
    }
    uint32_t GetCurveColor(size_t curveIndex) override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            uint32_t, // return type
            ImCurveEdit::DelegateStl, // parent class
            "get_curve_color", // function name (python)
            GetCurveColor, // function name (c++)
            curveIndex // params
        );
    }
    int EditPoint(size_t curveIndex, int pointIndex, ImVec2 value) override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            int, // return type
            ImCurveEdit::DelegateStl, // parent class
            "edit_point", // function name (python)
            EditPoint, // function name (c++)
            curveIndex, pointIndex, value // params
        );
    }
    void AddPoint(size_t curveIndex, ImVec2 value) override
    {
        PYBIND11_OVERRIDE_PURE_NAME(
            void, // return type
            ImCurveEdit::DelegateStl, // parent class
            "add_point", // function name (python)
            AddPoint, // function name (c++)
            curveIndex, value // params
        );
    }
    unsigned int GetBackgroundColor() override
    {
        PYBIND11_OVERRIDE_NAME(
            unsigned int, // return type
            ImCurveEdit::DelegateStl, // parent class
            "get_background_color", // function name (python)
            GetBackgroundColor // function name (c++)
        );
    }
    void BeginEdit(int param_0) override
    {
        PYBIND11_OVERRIDE_NAME(
            void, // return type
            ImCurveEdit::DelegateStl, // parent class
            "begin_edit", // function name (python)
            BeginEdit, // function name (c++)
            param_0 // params
        );
    }
    void EndEdit() override
    {
        PYBIND11_OVERRIDE_NAME(
            void, // return type
            ImCurveEdit::DelegateStl, // parent class
            "end_edit", // function name (python)
            EndEdit // function name (c++)
        );
    }
};
}  // namespace ImCurveEdit

// </litgen_glue_code> // Autogenerated code end
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



void py_init_module_imguizmo(py::module& m)
{
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // <litgen_pydef> // Autogenerated code below! Do not edit!
    ////////////////////    <generated_from:ImCurveEditStl.h>    ////////////////////

    { // <namespace ImCurveEdit>
        py::module_ pyNsImCurveEdit = m.def_submodule("ImCurveEdit", "");
        py::enum_<ImCurveEdit::CurveType>(pyNsImCurveEdit, "CurveType", py::arithmetic(), "")
            .value("curve_none", ImCurveEdit::CurveNone, "")
            .value("curve_discrete", ImCurveEdit::CurveDiscrete, "")
            .value("curve_linear", ImCurveEdit::CurveLinear, "")
            .value("curve_smooth", ImCurveEdit::CurveSmooth, "")
            .value("curve_bezier", ImCurveEdit::CurveBezier, "");


        auto pyNsImCurveEdit_ClassEditPoint =
            py::class_<ImCurveEdit::EditPoint>
                (pyNsImCurveEdit, "EditPoint", "")
            .def(py::init<>()) // implicit default constructor
            .def_readwrite("curve_index", &ImCurveEdit::EditPoint::curveIndex, "")
            .def_readwrite("point_index", &ImCurveEdit::EditPoint::pointIndex, "")
            .def("__lt__",
                &ImCurveEdit::EditPoint::operator<, py::arg("other"))
            ;


        auto pyNsImCurveEdit_ClassDelegate =
            py::class_<ImCurveEdit::Delegate, ImCurveEdit::Delegate_trampoline>
                (pyNsImCurveEdit, "Delegate", "")
            .def(py::init<>()) // implicit default constructor
            .def_readwrite("focused", &ImCurveEdit::Delegate::focused, "")
            .def("get_curve_count",
                &ImCurveEdit::Delegate::GetCurveCount)
            .def("is_visible",
                &ImCurveEdit::Delegate::IsVisible, py::arg("param_0"))
            .def("get_curve_type",
                &ImCurveEdit::Delegate::GetCurveType, py::arg("param_0"))
            .def("get_min",
                &ImCurveEdit::Delegate::GetMin)
            .def("get_max",
                &ImCurveEdit::Delegate::GetMax)
            .def("get_curve_color",
                &ImCurveEdit::Delegate::GetCurveColor, py::arg("curve_index"))
            .def("edit_point",
                &ImCurveEdit::Delegate::EditPoint, py::arg("curve_index"), py::arg("point_index"), py::arg("value"))
            .def("add_point",
                &ImCurveEdit::Delegate::AddPoint, py::arg("curve_index"), py::arg("value"))
            .def("get_background_color",
                &ImCurveEdit::Delegate::GetBackgroundColor)
            .def("begin_edit",
                &ImCurveEdit::Delegate::BeginEdit, py::arg("param_0"))
            .def("end_edit",
                &ImCurveEdit::Delegate::EndEdit)
            ;
        auto pyNsImCurveEdit_ClassDelegateStl =
            py::class_<ImCurveEdit::DelegateStl, ImCurveEdit::Delegate, ImCurveEdit::DelegateStl_trampoline>
                (pyNsImCurveEdit, "DelegateStl", "")
            .def(py::init<>()) // implicit default constructor
            .def("get_points_list",
                &ImCurveEdit::DelegateStl::GetPointsList, py::arg("curve_index"))
            ;


        pyNsImCurveEdit.def("edit_stl",
            ImCurveEdit::EditStl, py::arg("delegate"), py::arg("size"), py::arg("id"), py::arg("clipping_rect") = py::none());
    } // </namespace ImCurveEdit>
    ////////////////////    </generated_from:ImCurveEditStl.h>    ////////////////////

    // </litgen_pydef> // Autogenerated code end
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}
