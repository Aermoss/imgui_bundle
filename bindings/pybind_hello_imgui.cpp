#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

#include "hello_imgui/hello_imgui.h"

namespace py = pybind11;

void py_init_module_hello_imgui(py::module& m)
{
    using namespace HelloImGui;

    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // <litgen_pydef> // Autogenerated code below! Do not edit!
    ////////////////////    <generated_from:hello_imgui_amalgamation.h>    ////////////////////
    // <namespace HelloImGui>
    auto pyClassAssetFileData = py::class_<HelloImGui::AssetFileData>
        (m, "AssetFileData", "")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("data", &HelloImGui::AssetFileData::data, "")
        .def_readwrite("data_size", &HelloImGui::AssetFileData::dataSize, "")
        ;


    m.def("load_asset_file_data",
        HelloImGui::LoadAssetFileData, py::arg("asset_path"));

    m.def("free_asset_file_data",
        HelloImGui::FreeAssetFileData, py::arg("asset_file_data"));

    m.def("asset_file_full_path",
        HelloImGui::assetFileFullPath, py::arg("asset_relative_filename"));

    m.def("override_assets_folder",
        HelloImGui::overrideAssetsFolder, py::arg("folder"));

    m.def("set_assets_folder",
        HelloImGui::setAssetsFolder, py::arg("folder"));
    // </namespace HelloImGui>


    // <namespace HelloImGui>
    m.def("image_from_asset",
        HelloImGui::ImageFromAsset, py::arg("asset_path"), py::arg("size") = ImVec2(0, 0), py::arg("uv0") = ImVec2(0, 0), py::arg("uv1") = ImVec2(1,1), py::arg("tint_col") = ImVec4(1,1,1,1), py::arg("border_col") = ImVec4(0,0,0,0));

    m.def("image_button_from_asset",
        HelloImGui::ImageButtonFromAsset, py::arg("asset_path"), py::arg("size") = ImVec2(0, 0), py::arg("uv0") = ImVec2(0, 0), py::arg("uv1") = ImVec2(1,1), py::arg("frame_padding") = -1, py::arg("bg_col") = ImVec4(0,0,0,0), py::arg("tint_col") = ImVec4(1,1,1,1));

    m.def("im_texture_id_from_asset",
        HelloImGui::ImTextureIdFromAsset, py::arg("asset_path"));


    // <namespace internal>
    m.def("free_image_from_asset_map",
        HelloImGui::internal::Free_ImageFromAssetMap);
    // </namespace internal>
    // </namespace HelloImGui>


    // <namespace HelloImGui>
    auto pyClassAppWindowParams = py::class_<HelloImGui::AppWindowParams>
        (m, "AppWindowParams", "")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("window_title", &HelloImGui::AppWindowParams::windowTitle, "")
        .def_readwrite("window_size", &HelloImGui::AppWindowParams::windowSize, "")
        .def_readwrite("maximized", &HelloImGui::AppWindowParams::maximized, "")
        .def_readwrite("full_screen", &HelloImGui::AppWindowParams::fullScreen, "")
        .def_readwrite("window_position", &HelloImGui::AppWindowParams::windowPosition, "")
        ;
    // </namespace HelloImGui>


    // <namespace HelloImGui>
    py::enum_<HelloImGui::DefaultImGuiWindowType>(m, "DefaultImGuiWindowType", py::arithmetic(), "")
        .value("no_default_window", HelloImGui::DefaultImGuiWindowType::NoDefaultWindow, "");


    auto pyClassImGuiWindowParams = py::class_<HelloImGui::ImGuiWindowParams>
        (m, "ImGuiWindowParams", "")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("default_imgui_window_type", &HelloImGui::ImGuiWindowParams::defaultImGuiWindowType, "")
        .def_readwrite("background_color", &HelloImGui::ImGuiWindowParams::backgroundColor, "")
        .def_readwrite("show_menu_bar", &HelloImGui::ImGuiWindowParams::showMenuBar, "")
        .def_readwrite("show_menu_app", &HelloImGui::ImGuiWindowParams::showMenu_App, "")
        .def_readwrite("show_menu_view", &HelloImGui::ImGuiWindowParams::showMenu_View, "")
        .def_readwrite("show_status_bar", &HelloImGui::ImGuiWindowParams::showStatusBar, "")
        .def_readwrite("show_status_fps", &HelloImGui::ImGuiWindowParams::showStatus_Fps, "")
        .def_readwrite("config_windows_move_from_title_bar_only", &HelloImGui::ImGuiWindowParams::configWindowsMoveFromTitleBarOnly, "")
        .def_readwrite("enable_viewports", &HelloImGui::ImGuiWindowParams::enableViewports, "")
        ;
    // </namespace HelloImGui>


    // <namespace HelloImGui>
    m.def("load_font_ttf",
        HelloImGui::LoadFontTTF,
        py::arg("font_filename"), py::arg("font_size"), py::arg("use_full_glyph_range") = false, py::arg("config") = ImFontConfig(),
        pybind11::return_value_policy::reference);

    m.def("load_font_ttf_with_font_awesome_icons",
        HelloImGui::LoadFontTTF_WithFontAwesomeIcons,
        py::arg("font_filename"), py::arg("font_size"), py::arg("use_full_glyph_range") = false, py::arg("config_font") = ImFontConfig(), py::arg("config_icons") = ImFontConfig(),
        pybind11::return_value_policy::reference);

    m.def("merge_font_awesome_to_last_font",
        HelloImGui::MergeFontAwesomeToLastFont,
        py::arg("font_size"), py::arg("config") = ImFontConfig(),
        pybind11::return_value_policy::reference);


    // <namespace ImGuiDefaultSettings>
    m.def("load_default_font_with_font_awesome_icons",
        HelloImGui::ImGuiDefaultSettings::LoadDefaultFont_WithFontAwesomeIcons);

    m.def("setup_default_imgui_config",
        HelloImGui::ImGuiDefaultSettings::SetupDefaultImGuiConfig);

    m.def("setup_default_imgui_style",
        HelloImGui::ImGuiDefaultSettings::SetupDefaultImGuiStyle);
    // </namespace ImGuiDefaultSettings>
    // </namespace HelloImGui>


    // <namespace HelloImGui>
    auto pyClassMobileCallbacks = py::class_<HelloImGui::MobileCallbacks>
        (m, "MobileCallbacks", "")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("on_destroy", &HelloImGui::MobileCallbacks::OnDestroy, "")
        .def_readwrite("on_low_memory", &HelloImGui::MobileCallbacks::OnLowMemory, "")
        .def_readwrite("on_pause", &HelloImGui::MobileCallbacks::OnPause, "")
        .def_readwrite("on_resume", &HelloImGui::MobileCallbacks::OnResume, "")
        ;


    auto pyClassRunnerCallbacks = py::class_<HelloImGui::RunnerCallbacks>
        (m, "RunnerCallbacks", "")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("show_gui", &HelloImGui::RunnerCallbacks::ShowGui, "")
        .def_readwrite("show_menus", &HelloImGui::RunnerCallbacks::ShowMenus, "")
        .def_readwrite("show_status", &HelloImGui::RunnerCallbacks::ShowStatus, "")
        .def_readwrite("post_init", &HelloImGui::RunnerCallbacks::PostInit, "")
        .def_readwrite("before_exit", &HelloImGui::RunnerCallbacks::BeforeExit, "")
        .def_readwrite("any_backend_event_callback", &HelloImGui::RunnerCallbacks::AnyBackendEventCallback, "")
        .def_readwrite("load_additional_fonts", &HelloImGui::RunnerCallbacks::LoadAdditionalFonts, "")
        .def_readwrite("setup_imgui_config", &HelloImGui::RunnerCallbacks::SetupImGuiConfig, "")
        .def_readwrite("setup_imgui_style", &HelloImGui::RunnerCallbacks::SetupImGuiStyle, "")
        ;
    // </namespace HelloImGui>


    // <namespace HelloImGui>
    auto pyClassDockingSplit = py::class_<HelloImGui::DockingSplit>
        (m, "DockingSplit", "")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("initial_dock", &HelloImGui::DockingSplit::initialDock, "")
        .def_readwrite("new_dock", &HelloImGui::DockingSplit::newDock, "")
        .def_readwrite("direction", &HelloImGui::DockingSplit::direction, "")
        .def_readwrite("ratio", &HelloImGui::DockingSplit::ratio, "")
        ;


    auto pyClassDockableWindow = py::class_<HelloImGui::DockableWindow>
        (m, "DockableWindow", "")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("label", &HelloImGui::DockableWindow::label, "")
        .def_readwrite("dock_space_name", &HelloImGui::DockableWindow::dockSpaceName, "")
        .def_readwrite("gui_function", &HelloImGui::DockableWindow::GuiFunction, "")
        .def_readwrite("is_visible", &HelloImGui::DockableWindow::isVisible, "")
        .def_readwrite("can_be_closed", &HelloImGui::DockableWindow::canBeClosed, "")
        .def_readwrite("call_begin_end", &HelloImGui::DockableWindow::callBeginEnd, "")
        .def_readwrite("include_in_view_menu", &HelloImGui::DockableWindow::includeInViewMenu, "")
        .def_readwrite("imgui_window_flags", &HelloImGui::DockableWindow::imGuiWindowFlags, "")
        .def_readwrite("window_size", &HelloImGui::DockableWindow::windowSize, "")
        .def_readwrite("window_size_condition", &HelloImGui::DockableWindow::windowSizeCondition, "")
        .def_readwrite("window_position", &HelloImGui::DockableWindow::windowPosition, "")
        .def_readwrite("window_position_condition", &HelloImGui::DockableWindow::windowPositionCondition, "")
        .def_readwrite("focus_window_at_next_frame", &HelloImGui::DockableWindow::focusWindowAtNextFrame, "")
        ;


    auto pyClassDockingParams = py::class_<HelloImGui::DockingParams>
        (m, "DockingParams", "")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("docking_splits", &HelloImGui::DockingParams::dockingSplits, "")
        .def_readwrite("dockable_windows", &HelloImGui::DockingParams::dockableWindows, "")
        .def_readwrite("reset_user_dock_layout", &HelloImGui::DockingParams::resetUserDockLayout, "")
        .def_readwrite("was_dock_layout_applied", &HelloImGui::DockingParams::wasDockLayoutApplied, "wasDockLayoutApplied is an internal variable")
        .def("dockable_window_of_name",
            &HelloImGui::DockingParams::dockableWindowOfName, py::arg("name"))
        .def("focus_dockable_window",
            &HelloImGui::DockingParams::focusDockableWindow, py::arg("window_name"))
        ;
    // </namespace HelloImGui>


    // <namespace HelloImGui>
    auto pyClassBackendPointers = py::class_<HelloImGui::BackendPointers>
        (m, "BackendPointers", "")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("glfw_window", &HelloImGui::BackendPointers::glfwWindow, "")
        .def_readwrite("sdl_window", &HelloImGui::BackendPointers::sdlWindow, "")
        .def_readwrite("sdl_gl_context", &HelloImGui::BackendPointers::sdlGlContext, "")
        ;
    // </namespace HelloImGui>


    // <namespace HelloImGui>
    auto pyClassRunnerParams = py::class_<HelloImGui::RunnerParams>
        (m, "RunnerParams", "")
        .def(py::init<>()) // implicit default constructor
        .def_readwrite("callbacks", &HelloImGui::RunnerParams::callbacks, "")
        .def_readwrite("app_window_params", &HelloImGui::RunnerParams::appWindowParams, "")
        .def_readwrite("imgui_window_params", &HelloImGui::RunnerParams::imGuiWindowParams, "")
        .def_readwrite("docking_params", &HelloImGui::RunnerParams::dockingParams, "")
        .def_readwrite("backend_pointers", &HelloImGui::RunnerParams::backendPointers, "")
        .def_readwrite("app_shall_exit", &HelloImGui::RunnerParams::appShallExit, "")
        .def_readwrite("fps", &HelloImGui::RunnerParams::fps, "")
        ;
    // </namespace HelloImGui>


    // <namespace HelloImGui>
    py::enum_<HelloImGui::LogLevel>(m, "LogLevel", py::arithmetic(), "")
        .value("debug", HelloImGui::LogLevel::Debug, "")
        .value("info", HelloImGui::LogLevel::Info, "")
        .value("warning", HelloImGui::LogLevel::Warning, "")
        .value("error", HelloImGui::LogLevel::Error, "");


    m.def("log",
        [](LogLevel level, const char * const format)
        {
            auto Log_adapt_variadic_format = [](LogLevel level, const char * const format)
            {
                HelloImGui::Log(level, "%s", format);
            };

            Log_adapt_variadic_format(level, format);
        },     py::arg("level"), py::arg("format"));

    m.def("log_clear",
        HelloImGui::LogClear);

    m.def("log_gui",
        HelloImGui::LogGui);
    // </namespace HelloImGui>


    // <namespace HelloImGui>
    m.def("run",
        py::overload_cast<RunnerParams &>(HelloImGui::Run), py::arg("runner_params"));

    m.def("run",
        py::overload_cast<VoidFunction, ImVec2, std::string>(HelloImGui::Run), py::arg("gui_fonction"), py::arg("window_size") = ImVec2(800.f, 600.f), py::arg("window_title") = "");
    // </namespace HelloImGui>
    ////////////////////    </generated_from:hello_imgui_amalgamation.h>    ////////////////////

    // </litgen_pydef> // Autogenerated code end
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}
