#include <pybind11/pybind11.h>

#include "imgui/backends/imgui_impl_glfw.h"
#include "imgui/backends/imgui_impl_opengl3.h"
namespace py = pybind11;

// Atrocious wrappers around GLFW opaque types: GLFWmonitor, GLFWwindow and GLFWcursor
// They are used as pointer in the GLFW API, however, pybind11 stubornly refuses to publish
// a pointer to an incompletely defined type.
//
// Part 1: wrapper structs
//
// Here, we use a dirty trick which is that
//     struct FooWrapper { Foo _; }
// has exactly the same memory layout as Foo...
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "glfw/src/internal.h"
struct GLFWmonitor { _GLFWmonitor _;};
struct GLFWwindow { _GLFWwindow _; };
struct GLFWcursor { _GLFWcursor _; };


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// <litgen_glue_code>  // Autogenerated code below! Do not edit!

// </litgen_glue_code> // Autogenerated code end
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



void py_init_module_imgui_backends(py::module& m)
{
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // <litgen_pydef> // Autogenerated code below! Do not edit!
    ////////////////////    <generated_from:imgui_impl_opengl3.h>    ////////////////////
    m.def("open_gl3_init",
        ImGui_ImplOpenGL3_Init, py::arg("glsl_version") = py::none());

    m.def("open_gl3_shutdown",
        ImGui_ImplOpenGL3_Shutdown);

    m.def("open_gl3_new_frame",
        ImGui_ImplOpenGL3_NewFrame);

    m.def("open_gl3_render_draw_data",
        ImGui_ImplOpenGL3_RenderDrawData, py::arg("draw_data"));

    m.def("open_gl3_create_fonts_texture",
        ImGui_ImplOpenGL3_CreateFontsTexture);

    m.def("open_gl3_destroy_fonts_texture",
        ImGui_ImplOpenGL3_DestroyFontsTexture);

    m.def("open_gl3_create_device_objects",
        ImGui_ImplOpenGL3_CreateDeviceObjects);

    m.def("open_gl3_destroy_device_objects",
        ImGui_ImplOpenGL3_DestroyDeviceObjects);
    ////////////////////    </generated_from:imgui_impl_opengl3.h>    ////////////////////


    ////////////////////    <generated_from:imgui_impl_glfw.h>    ////////////////////
    m.def("glfw_init_for_open_gl",
        ImGui_ImplGlfw_InitForOpenGL, py::arg("window"), py::arg("install_callbacks"));

    m.def("glfw_init_for_vulkan",
        ImGui_ImplGlfw_InitForVulkan, py::arg("window"), py::arg("install_callbacks"));

    m.def("glfw_init_for_other",
        ImGui_ImplGlfw_InitForOther, py::arg("window"), py::arg("install_callbacks"));

    m.def("glfw_shutdown",
        ImGui_ImplGlfw_Shutdown);

    m.def("glfw_new_frame",
        ImGui_ImplGlfw_NewFrame);

    m.def("glfw_install_callbacks",
        ImGui_ImplGlfw_InstallCallbacks, py::arg("window"));

    m.def("glfw_restore_callbacks",
        ImGui_ImplGlfw_RestoreCallbacks, py::arg("window"));

    m.def("glfw_window_focus_callback",
        ImGui_ImplGlfw_WindowFocusCallback,
        py::arg("window"), py::arg("focused"),
        "Since 1.84");

    m.def("glfw_cursor_enter_callback",
        ImGui_ImplGlfw_CursorEnterCallback,
        py::arg("window"), py::arg("entered"),
        "Since 1.84");

    m.def("glfw_cursor_pos_callback",
        ImGui_ImplGlfw_CursorPosCallback,
        py::arg("window"), py::arg("x"), py::arg("y"),
        "Since 1.87");

    m.def("glfw_mouse_button_callback",
        ImGui_ImplGlfw_MouseButtonCallback, py::arg("window"), py::arg("button"), py::arg("action"), py::arg("mods"));

    m.def("glfw_scroll_callback",
        ImGui_ImplGlfw_ScrollCallback, py::arg("window"), py::arg("xoffset"), py::arg("yoffset"));

    m.def("glfw_key_callback",
        ImGui_ImplGlfw_KeyCallback, py::arg("window"), py::arg("key"), py::arg("scancode"), py::arg("action"), py::arg("mods"));

    m.def("glfw_char_callback",
        ImGui_ImplGlfw_CharCallback, py::arg("window"), py::arg("c"));

    m.def("glfw_monitor_callback",
        ImGui_ImplGlfw_MonitorCallback, py::arg("monitor"), py::arg("event"));
    ////////////////////    </generated_from:imgui_impl_glfw.h>    ////////////////////

    // </litgen_pydef> // Autogenerated code end
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}
